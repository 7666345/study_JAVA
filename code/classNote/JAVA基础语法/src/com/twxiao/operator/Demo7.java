package com.twxiao.operator;
 //位运算符
public class Demo7 {
     public static void main(String[] args) {

         /*
         按二进制的位进行与或非等操作

         A= 0011 1100
         B= 0000 1101

         按位与： A & B = 0000 1100 --------AB两个数字对应的位上都为1时，结果为1，否则为0.
         按位或： A | B = 0011 1101 --------AB两个数字对应的位上只要有一个为1，结果就为1，否则为0.
         按位异或：A ^ B= 0011 0001 ---------AB两个数字对应的位上，数字相同结果为0，不同则为1.
         按位取反： ~B  = 1111 0010 ---------数字对应位的反值.
          */

         //扩展，面试题：如何最快速计算2X8的结果？答案如下：
         System.out.println(2<<3);

         /*
              二进制数     -----    十进制数
            0000 0000    ------      0
            0000 0001    ------      1
            0000 0010    ------      2
            0000 0011    ------      3
            0000 0100    ------      4
            0000 1000    ------      8
            0001 0000    ------      16

            二进制中，1每向左移动1位，相当于 乘以 2。 每向右移动1位，相当于 除以 2.
            所以 向左位移 <<  ==X2， 向右位移 >>  ==/2

            因为2x8可以分解为 1X2X2X2，即二进制中的向左位移3次： 2<<3
            最终结果为16。
          */

     }

}
